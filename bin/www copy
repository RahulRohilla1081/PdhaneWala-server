#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("server:server");
var http = require("http");
const socketIO = require("socket.io");
const dbConnect = require("../db");

// const auto_draft_cleanup_API_call = require("../auto_draft_cleanup_projects/auto_draft_cleanup_API_call");
// const weekly_report_mail_APIs_call = require("../reports_scheduler/weekly_report_mail_APIs_call");
// const reminder_mail_API_call = require("../reminder_mail/reminder_mail_API_call");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "9000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create websocket server.
 */
var io = socketIO(server);
// make connection with user from server side
io.on("connection", (socket) => {
  console.log("New user connected");
  // listen for message from user
  var data;
  socket.on("createMessage", async (newMessage) => {
    console.log("newMessage", newMessage);
    let db = await dbConnect();
    data = await db
      .collection("user_login")
      .find({ USER_ID: newMessage.USER_ID })
      .toArray();
    console.log(data);
    // socket.emit("newMessage", {
    //   IS_VERIFIED: data,
    //   // IS_VERIFIED: true,
    // });
  });

  //emit message from server to user
  // socket.emit("newMessage", {
  //   // IS_VERIFIED: data[0].IS_VERIFIED,
  //   IS_VERIFIED: false,
  // });

  // when server disconnects from user
  socket.on("disconnect", () => {
    console.log("disconnected from user");
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(
  port
  //reminder_mail_API_call(),
  // , auto_draft_cleanup_API_call
  // weekly_report_mail_APIs_call()
);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

module.exports = io;
